📖 Updated README: myLogger - Asynchronous Multi-Backend Logger for C++

🚀 myLogger is a high-performance, asynchronous logger supporting multiple backends (console, file) with log level filtering, automatic log rotation, and timestamped log entries.
📌 Features

✅ Asynchronous Logging - Logs run in a background thread.
✅ Multiple Backends - Supports Console + File Logging Simultaneously.
✅ Log Level Filtering - Set INFO, WARN, ERROR, or DEBUG log levels.
✅ Thread-Safe - Uses mutex and condition variables.
✅ Timestamped Log Entries - Every log message includes a precise timestamp.
✅ Configurable Log Files - Set custom filename format (e.g., log_%Y-%m-%d.txt).
✅ Automated Config Handling - Reads settings from logger.conf or generates a default config.
✅ Automatic Log Cleanup - Removes logs older than a configurable threshold.
✅ LoggerManager for Simplified Setup - Easy global logger access and configuration.
✅ Colored Console Output (Planned) - Logs appear in different colors for better readability.
✅ Easy Integration - Single public include #include "loggerLib.hpp".
📂 Project Structure

/myLogger/
│── include/
│   ├── loggerLib.hpp          <-- Public API (Single Include)
│   ├── logger.hpp             <-- Core Logger
│   ├── loggerManager.hpp      <-- LoggerManager for Simplified Setup
│   ├── loggerConfig.hpp       <-- Reads and writes configuration
│   ├── logLevel.hpp           <-- Log Level Enums
│   ├── logBackend.hpp         <-- Backend Interface
│   ├── consoleBackend.hpp     <-- Console Logger
│   ├── fileBackend.hpp        <-- File Logger
│
│── src/
│   ├── logger.cpp
│   ├── loggerManager.cpp      <-- LoggerManager Implementation
│   ├── loggerConfig.cpp       <-- Handles config loading/saving
│   ├── consoleBackend.cpp
│   ├── fileBackend.cpp
│
│── demo/                      <-- Example applications
│   ├── main.cpp               <-- Uses Logger & TaskManager
│   ├── taskManager.hpp        <-- Example task manager using logging
│   ├── taskManager.cpp
│
│── tests/
│   ├── test_logger.cpp
│
│── CMakeLists.txt
│── README.md
│── logger.conf                <-- Auto-generated config file
│── logs/                      <-- Log directory (auto-created)

📚 Configuration (logger.conf)

myLogger automatically loads settings from logger.conf, or creates a default config if missing.
Modify this file to control log behavior.

Example logger.conf:

# Logger Configuration File
log_directory=logs/                    # Where logs are stored
log_filename_format=log_%Y-%m-%d.txt    # Custom filename format
log_rotation_days=7                     # Auto-delete logs older than X days
enable_console=true                      # Enable console output
enable_file=true                         # Enable file logging
enable_colors=false                      # (Planned) Enable colored console logs
flush_mode=auto                          # Auto flush logs
log_level=INFO                           # Set log level: INFO, WARN, ERROR, DEBUG

📚 Public Interface
1️⃣ Logger Class

#include "loggerLib.hpp"
Logger logger;

📝 Methods

void addBackend(std::unique_ptr<LogBackend> backend);
void setLogLevel(LogLevel level);
void log(LogLevel level, const std::string& message);
void flush();

🛠 Example Usage

Logger logger;
logger.addBackend(std::make_unique<ConsoleBackend>());
logger.addBackend(std::make_unique<FileBackend>());  // ✅ Uses timestamped filename

logger.setLogLevel(LogLevel::WARN);
logger.log(LogLevel::INFO, "This won't be logged due to filtering");
logger.log(LogLevel::ERROR, "Critical failure!");

2️⃣ LoggerManager for Easy Setup

#include "loggerManager.hpp"
LoggerManager::configure(true, true, LogLevel::INFO);
Logger& logger = LoggerManager::getInstance();
logger.log(LogLevel::INFO, "Application started");

3️⃣ Automated Config Loading

Instead of manually configuring the logger, automatically load settings from logger.conf:

LoggerManager::configureFromConfig("logger.conf");  // ✅ Reads from config or creates default
Logger& logger = LoggerManager::getInstance();
logger.log(LogLevel::INFO, "Logger successfully configured.");

4️⃣ Available Log Levels

enum class LogLevel { INFO, WARN, ERROR, DEBUG };

✅ INFO → Logs everything.
✅ WARN → Logs WARN and ERROR.
✅ ERROR → Logs only ERROR.
✅ DEBUG → Most detailed logs for debugging purposes.
5️⃣ Console Logging

logger.addBackend(std::make_unique<ConsoleBackend>());

6️⃣ File Logging (Configurable Filename)

auto fileBackend = std::make_unique<FileBackend>();
std::cout << "Logging to file: " << fileBackend->getFilename() << "\n";
logger.addBackend(std::move(fileBackend));

The filename format is set via logger.conf, e.g.:

log_filename_format=log_%Y-%m-%d_%H-%M-%S.txt

7️⃣ Automatic Log Cleanup

fileBackend->cleanOldLogs(7);  // ✅ Deletes logs older than 7 days

8️⃣ Timestamped Log Entries

Each log entry now includes a timestamp for precise tracking:

[2025-02-09 14:32:10] [INFO] Starting automated simulation...
[2025-02-09 14:32:11] [INFO] Added task: Buy groceries
[2025-02-09 14:32:12] [INFO] Added task: Complete project
[2025-02-09 14:32:13] [INFO] Listing tasks:
[2025-02-09 14:32:13] [INFO] 1. Buy groceries
[2025-02-09 14:32:13] [INFO] 2. Complete project
[2025-02-09 14:32:15] [ERROR] Invalid task number: 10

🚀 Running the Example Program

mkdir build && cd build
cmake ..
make
./myLoggerApp

🚀 This will automatically create the logs/ folder and logger.conf if missing.
📌 Next Steps

    ✅ [ ] Performance Benchmarking Under High Load
    ✅ [ ] Improve Log Rotation (Compress Old Logs)
    ✅ [ ] Expand LoggerManager for More Configurations
    ✅ [ ] Implement Colored Console Logs for Better Readability

🛠 Author: @BoboBaggins
👤 License: MIT

🔥 Contributions Welcome! 🚀
